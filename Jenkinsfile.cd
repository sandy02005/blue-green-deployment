pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag to deploy')
    }


    environment {
        ARM_CLIENT_ID       = credentials('AZURE_CLIENT_ID')
        ARM_CLIENT_SECRET   = credentials('AZURE_CLIENT_SECRET')
        ARM_TENANT_ID       = credentials('AZURE_TENANT_ID')
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        RESOURCE_GROUP      = 'nodeapp-devops-rg'
        CLUSTER_NAME        = 'nodeapp-devops-aks'

        // env vars
        MONGO_URL = credentials('MONGO_URL')     // Jenkins ID for Mongo URL
        JWT_SECRET = credentials('JWT_SECRET')   // Jenkins ID for JWT secret
        PORT = '5000'                            // or use another Jenkins secret
        JWT_EXPIRES_IN = '1h'                    // or use another Jenkins secret
    }

    stages {
        stage('Azure login') {
            steps {
                echo "üîê Logging into Azure..."
                sh '''
                az login --service-principal \
                    --username "$ARM_CLIENT_ID" \
                    --password "$ARM_CLIENT_SECRET" \
                    --tenant "$ARM_TENANT_ID"

                az account set --subscription "$ARM_SUBSCRIPTION_ID"

                az aks get-credentials \
                    --resource-group "$RESOURCE_GROUP" \
                    --name "$CLUSTER_NAME" \
                    --overwrite-existing
                '''
            }
        }

        stage('Wait for AKS Cluster') {
            steps {
                script {
                    def maxRetries = 12
                    def delay = 15
                    def ready = false

                    for (int i = 1; i <= maxRetries; i++) {
                        def result = sh(script: 'kubectl get nodes', returnStatus: true)
                        if (result == 0) {
                            echo "‚úÖ Cluster is ready"
                            // Show detailed node info after cluster is ready
                            sh 'kubectl get nodes -o wide'
                            ready = true
                            break
                        } else {
                            echo "‚è≥ Attempt ${i}/${maxRetries} - Cluster not ready. Retrying in ${delay}s..."
                            sleep time: delay, unit: 'SECONDS'
                        }
                    }

                    if (!ready) {
                        error("‚ùå Cluster did not become reachable within timeout.")
                    }
                }
            }
        }

        stage('Get kubeconfig & deploy to AKS') {
            steps {
                dir('infra/ansible') {
                    echo "üì• Getting kubeconfig..."
                    sh '''
                        az aks get-credentials \
                            --resource-group $RESOURCE_GROUP \
                            --name $CLUSTER_NAME \
                            --overwrite-existing
                    '''
                    echo "üöÄ Running Ansible deployment with image tag: ${params.DOCKER_IMAGE_TAG}..."
                   sh """#!/bin/bash
                    ansible-playbook deploy-to-aks.yml \
                        -e "docker_image=sooraj0249/nodejs-ats-app:${params.DOCKER_IMAGE_TAG}" \
                        -e "mongo_url=${MONGO_URL}" \
                        -e "jwt_secret=${JWT_SECRET}" \
                        -e "jwt_expires_in=${JWT_EXPIRES_IN}" \
                        -e "port=${PORT}"
                    """

                }
            }
        }
    }

    post {
        always {
            echo "‚úÖ CD Pipeline completed."
        }
    }
}
