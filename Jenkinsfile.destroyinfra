pipeline {
    agent any

    parameters {
        booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Check to destroy infra ( Azure/AWS )')
        booleanParam(name: 'DESTROY_INFRA_AKS', defaultValue: false, description: 'Check to destroy infrastructure (Azure)')
        booleanParam(name: 'DESTROY_INFRA_AWS', defaultValue: false, description: 'Check to destroy infrastructure (AWS)')
    }

    environment {
        // aws access
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION    = 'us-east-1'
        
        TABLE_NAME            = 'terraform-locks'
        BUCKET_NAME           = 'my-terraform-remote-state-bucket-007'
        S3_FOLDER             = 'markerFile'
        S3_TERRAFORM_FOLDER       = 'dev'
        // azure access
        ARM_CLIENT_ID         = credentials('AZURE_CLIENT_ID')
        ARM_CLIENT_SECRET     = credentials('AZURE_CLIENT_SECRET')
        ARM_TENANT_ID         = credentials('AZURE_TENANT_ID')
        ARM_SUBSCRIPTION_ID   = credentials('AZURE_SUBSCRIPTION_ID')
    }

    stages {
        stage('Generate SSH Key (Azure AKS)') {
            when {
                allOf {
                    expression { params.DESTROY_INFRA }
                    expression { params.DESTROY_INFRA_AKS }
                }
            }
            steps {
                dir('infra/azure-aks') {
                    sh '''
                    if [ ! -f id_rsa ]; then
                        ssh-keygen -t rsa -b 2048 -f id_rsa -C "terraform@devops" -N ""
                    fi
                    '''
                }
            }
        }

        // destroy azure infrastructure
        stage('Destroy Azure AKS Infrastructure') {
            when {
                allOf {
                    expression { params.DESTROY_INFRA }
                    expression { params.DESTROY_INFRA_AKS }
                }
            }
            steps {
                dir('infra/azure-aks') {
                    sh '''
                    terraform init
                    terraform plan
                    terraform destroy -auto-approve
                    '''
                }
                echo '‚úÖ Azure AKS infrastructure destroyed.'
            }
        }

        // delete dynamodb table

        stage('Delete DynamoDB Table') {
            steps {
                script {
                    def tableName = TABLE_NAME
                    def region = AWS_DEFAULT_REGION

                    echo "üîç Checking if DynamoDB table '${tableName}' exists..."

                    def tableExists = sh(
                        script: "aws dynamodb describe-table --table-name ${tableName} --region ${region}",
                        returnStatus: true
                    ) == 0

                    if (tableExists) {
                        echo "‚ö†Ô∏è Table found. Deleting DynamoDB table '${tableName}'..."
                        sh "aws dynamodb delete-table --table-name ${tableName} --region ${region}"
                        echo "‚úÖ DynamoDB table '${tableName}' deleted."
                    } else {
                        echo "‚úÖ Table '${tableName}' does not exist. Skipping deletion."
                    }
                }
            }
        }

        stage('Delete DynamoDB Table') {
            steps {
                script {
            echo "üîç Checking if DynamoDB table '${TABLE_NAME}' exists..."
            def exists = sh(
                script: "aws dynamodb describe-table --table-name ${TABLE_NAME} --region ${AWS_DEFAULT_REGION}",
                returnStatus: true
            ) == 0

            if (exists) {
                echo "‚ö†Ô∏è Table found. Deleting DynamoDB table '${TABLE_NAME}'..."
                sh "aws dynamodb delete-table --table-name ${TABLE_NAME} --region ${AWS_DEFAULT_REGION}"

                echo "‚è≥ Waiting for DynamoDB table '${TABLE_NAME}' to be deleted..."
                // Poll every 5 seconds for max 1 min to confirm deletion
                int retries = 12
                int waitTime = 5
                boolean deleted = false
                for (int i = 0; i < retries; i++) {
                def check = sh(
                    script: "aws dynamodb describe-table --table-name ${TABLE_NAME} --region ${AWS_DEFAULT_REGION}",
                    returnStatus: true
                )
                if (check != 0) {
                    deleted = true
                    break
                }
                echo "Waiting for table to delete... (${i+1}/${retries})"
                sleep(waitTime)
                }
                if (deleted) {
                echo "‚úÖ DynamoDB table '${TABLE_NAME}' deleted successfully."
                } else {
                echo "‚ö†Ô∏è Timeout waiting for DynamoDB table deletion."
                }
            } else {
                echo "‚úÖ DynamoDB table '${TABLE_NAME}' does not exist, skipping."
            }
                }
            }
        }

        // cleanup s3 bucket
        stage('Cleanup S3') {
            when {
                allOf {
                    expression { params.DESTROY_INFRA }
                    expression { params.DESTROY_INFRA_AWS }
                }
            }
            steps {
                dir('infra/backend-aws') {
                    script {

                        echo 'üßπ Cleaning up S3 bucket...'
                        sh '''

                        if [ -z "$S3_FOLDER" ]; then
                            aws s3 rm s3://$BUCKET_NAME --recursive
                        else
                            aws s3 rm s3://$BUCKET_NAME/$S3_FOLDER --recursive
                        fi

                        if [ -z "$S3_TERRAFORM_FOLDER" ]; then
                            aws s3 rm s3://$BUCKET_NAME --recursive
                        else
                            aws s3 rm s3://$BUCKET_NAME/$S3_TERRAFORM_FOLDER --recursive
                        fi

                        '''
                        echo '‚úÖ S3 bucket cleaned.'
                    }
                }
            }
        }

         stage('Delete S3 Bucket') {
            steps {
                script {
                echo "üóëÔ∏è Deleting S3 bucket ${BUCKET_NAME} ..."
                def status = sh(
                    script: "aws s3 rb s3://${BUCKET_NAME} --force",
                    returnStatus: true
                )
                if (status == 0) {
                    echo "‚úÖ S3 bucket deleted successfully."
                } else {
                    echo "‚ö†Ô∏è Failed to delete S3 bucket or bucket does not exist."
                }
                }
            }
        }


        // destroy aws infrastructure
        stage('Destroy AWS Infrastructure') {
            when {
                allOf {
                    expression { params.DESTROY_INFRA }
                    expression { params.DESTROY_INFRA_AWS }
                }
            }
            steps {
                dir('infra/backend-aws') {
                    sh '''
                    terraform init
                    terraform plan
                    terraform destroy -auto-approve
                    '''
                }
                echo '‚úÖ AWS infrastructure destroyed.'
            }
        }
      
    }

    post {
        always {
            echo "üîö Pipeline finished."
        }
    }
}
